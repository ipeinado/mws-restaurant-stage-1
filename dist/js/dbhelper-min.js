class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static openDB(){if("indexedDB"in window)return idb.open("mws",1,e=>{switch(e.oldVersion){case 0:let t=e.createObjectStore("restaurants",{keyPath:"id"});t.createIndex("cuisine_type","cuisine_type",{unique:!1}),t.createIndex("neighborhood","neighborhood",{unique:!1});case 1:e.createObjectStore("reviews",{keyPath:"id",autoIncrement:!0})}});console.log("This browser doesn't support IndexedDB")}static fetchRestaurants(e){const t=DBHelper.openDB(),r=DBHelper.DATABASE_URL;fetch(r).then(e=>e.json()).then(t=>{e(null,t),DBHelper.saveRestaurantsLocally(t).catch(e=>console.warn(e))}).catch(r=>{console.log(`Request failed. Error returned: ${r}`),t.then(e=>{return console.log("calling database"),e.transaction("restaurants","readonly").objectStore("restaurants").getAll()}).then(t=>e(null,t)).catch(t=>e(t,null))})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,s)=>{if(n)r(n,null);else{let n=s;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static saveRestaurantsLocally(e){if(!("indexedDB"in window))return null;return DBHelper.openDB().then(t=>{const r=t.transaction("restaurants","readwrite").objectStore("restaurants");return Promise.all(e.map(e=>r.put(e))).catch(e=>{throw Error("could not store restaurants in database")})})}static fetchReviews(e){DBHelper.getServerReviews().then(t=>{console.log("Getting reviews from network"),e(null,t),DBHelper.saveReviewsLocally(t).then(()=>console.log("Data from network saved in local store")).catch(e=>console.warn(e))}).catch(t=>{console.log("Network requests have failed, this is expected if offline"),DBHelper.getLocalReviews().then(t=>{t.length?e(null,t):console.log("No data")})})}static fetchReviewsByRestaurant(e,t){DBHelper.fetchReviews((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.restaurant_id==e);t(null,r)}})}static getServerReviews(){return fetch("http://localhost:1337/reviews").then(e=>{if(!e.ok)throw Error(e.statusText);return e.json()})}static saveReviewsLocally(e){if(!("indexedDB"in window))return null;return DBHelper.openDB().then(t=>{const r=t.transaction("reviews","readwrite").objectStore("reviews");return Promise.all(e.map(e=>r.put(e))).catch(e=>{throw Error("Reviews were not added to the store: "+e)})})}static getLocalReviews(){return"indexedDB"in window?DBHelper.openDB().then(e=>{return e.transaction("reviews","readonly").objectStore("reviews").getAll()}):null}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}`}static urlForReviews(e){return`./reviews/?restaurant_id=${e.id}`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
