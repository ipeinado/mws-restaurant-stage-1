class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static openDB(){if("indexedDB"in window)return idb.open("mws",1,e=>{switch(e.oldVersion){case 0:let t=e.createObjectStore("restaurants",{keyPath:"id"});t.createIndex("cuisine_type","cuisine_type",{unique:!1}),t.createIndex("neighborhood","neighborhood",{unique:!1});case 1:e.createObjectStore("reviews",{keyPath:"id",autoIncrement:!0})}});console.log("This browser doesn't support IndexedDB")}static fetchRestaurants(e){const t=DBHelper.openDB(),r=DBHelper.DATABASE_URL;fetch(r).then(e=>e.json()).then(t=>{e(null,t),DBHelper.saveRestaurantsLocally(t).catch(e=>console.warn(e))}).catch(r=>{console.log(`Request failed. Error returned: ${r}`),t.then(e=>{return console.log("calling database"),e.transaction("restaurants","readonly").objectStore("restaurants").getAll()}).then(t=>e(null,t)).catch(t=>e(t,null))})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,a)=>{if(n)r(n,null);else{let n=a;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static saveRestaurantsLocally(e){if(!("indexedDB"in window))return null;return DBHelper.openDB().then(t=>{const r=t.transaction("restaurants","readwrite").objectStore("restaurants");return Promise.all(e.map(e=>r.put(e))).catch(e=>{throw Error("could not store restaurants in database")})})}static fetchReviews(e){DBHelper.getServerReviews().then(t=>{console.log("Getting reviews from network"),e(null,t),DBHelper.saveReviewsLocally(t).then(()=>console.log("Data from network saved in local store")).catch(e=>console.warn(e))}).catch(t=>{console.log("Network requests have failed, this is expected if offline"),DBHelper.getLocalReviews().then(t=>{t.length?e(null,t):console.log("No data")})})}static fetchReviewsByRestaurant(e,t){DBHelper.fetchReviews((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.restaurant_id==e);t(null,r)}})}static getServerReviews(){return fetch("http://localhost:1337/reviews").then(e=>{if(!e.ok)throw Error(e.statusText);return e.json()})}static saveReviewsLocally(e){if(!("indexedDB"in window))return null;return DBHelper.openDB().then(t=>{const r=t.transaction("reviews","readwrite").objectStore("reviews");return Promise.all(e.map(e=>r.put(e))).catch(e=>{throw Error("Reviews were not added to the store: "+e)})})}static getLocalReviews(){return"indexedDB"in window?DBHelper.openDB().then(e=>{return e.transaction("reviews","readonly").objectStore("reviews").getAll()}):null}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return e.photograph?`/img/${e.photograph}`:"/img/no-photo-available"}static urlForReviews(e){return`./reviews/?restaurant_id=${e.id}`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRiaGVscGVyLmpzIl0sIm5hbWVzIjpbIkRCSGVscGVyIiwiREFUQUJBU0VfVVJMIiwiW29iamVjdCBPYmplY3RdIiwid2luZG93IiwiaWRiIiwib3BlbiIsInVwZ3JhZGVEQiIsIm9sZFZlcnNpb24iLCJyZXN0YXVyYW50c1N0b3JlIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJrZXlQYXRoIiwiY3JlYXRlSW5kZXgiLCJ1bmlxdWUiLCJhdXRvSW5jcmVtZW50IiwiY29uc29sZSIsImxvZyIsImNhbGxiYWNrIiwiZGJQcm9taXNlIiwib3BlbkRCIiwidXJsIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJqc29uIiwicmVzdGF1cmFudHNKc29uIiwic2F2ZVJlc3RhdXJhbnRzTG9jYWxseSIsImNhdGNoIiwiZXJyIiwid2FybiIsImRiIiwidHJhbnNhY3Rpb24iLCJvYmplY3RTdG9yZSIsImdldEFsbCIsInJlc3RhdXJhbnRzIiwiaWQiLCJmZXRjaFJlc3RhdXJhbnRzIiwiZXJyb3IiLCJyZXN0YXVyYW50IiwiZmluZCIsInIiLCJjdWlzaW5lIiwicmVzdWx0cyIsImZpbHRlciIsImN1aXNpbmVfdHlwZSIsIm5laWdoYm9yaG9vZCIsIm5laWdoYm9yaG9vZHMiLCJtYXAiLCJ2IiwiaSIsInVuaXF1ZU5laWdoYm9yaG9vZHMiLCJpbmRleE9mIiwiY3Vpc2luZXMiLCJ1bmlxdWVDdWlzaW5lcyIsInN0b3JlIiwiUHJvbWlzZSIsImFsbCIsInB1dCIsIkVycm9yIiwiZ2V0U2VydmVyUmV2aWV3cyIsInJldmlld3NGcm9tTmV0d29yayIsInNhdmVSZXZpZXdzTG9jYWxseSIsImdldExvY2FsUmV2aWV3cyIsIm9mZmxpbmVEYXRhIiwibGVuZ3RoIiwicmVzdGF1cmFudF9pZCIsImZldGNoUmV2aWV3cyIsInJldmlld3MiLCJvayIsInN0YXR1c1RleHQiLCJyZXZpZXciLCJwaG90b2dyYXBoIiwiZ29vZ2xlIiwibWFwcyIsIk1hcmtlciIsInBvc2l0aW9uIiwibGF0bG5nIiwidGl0bGUiLCJuYW1lIiwidXJsRm9yUmVzdGF1cmFudCIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsIkRST1AiXSwibWFwcGluZ3MiOiJBQUdBLE1BQU1BLFNBS0pDLDBCQUVFLE1BQU8sb0NBR1RDLGdCQUNFLEdBQU0sY0FBZUMsT0FLckIsT0FBT0MsSUFBSUMsS0FBSyxNQUFPLEVBQUlDLElBQ3pCLE9BQU9BLEVBQVVDLFlBQ2YsS0FBSyxFQUNILElBQUlDLEVBQW1CRixFQUFVRyxrQkFBa0IsY0FBZSxDQUFDQyxRQUFTLE9BQzVFRixFQUFpQkcsWUFBWSxlQUFnQixlQUFnQixDQUFDQyxRQUFRLElBQ3RFSixFQUFpQkcsWUFBWSxlQUFnQixlQUFnQixDQUFDQyxRQUFRLElBQ3hFLEtBQUssRUFDZ0JOLEVBQVVHLGtCQUFrQixVQUFXLENBQUNDLFFBQVMsS0FBTUcsZUFBZSxPQVg3RkMsUUFBUUMsSUFBSSwwQ0FnQmhCYix3QkFBd0JjLEdBRXRCLE1BQU1DLEVBQVlqQixTQUFTa0IsU0FFckJDLEVBQU1uQixTQUFTQyxhQUVyQm1CLE1BQU1ELEdBQ0hFLEtBQUtDLEdBQVlBLEVBQVNDLFFBQzFCRixLQUFLRyxJQUNKUixFQUFTLEtBQU1RLEdBQ2Z4QixTQUFTeUIsdUJBQXVCRCxHQUM3QkUsTUFBT0MsR0FBUWIsUUFBUWMsS0FBS0QsTUFFaENELE1BQU1DLElBQ0xiLFFBQVFDLHVDQUF1Q1ksS0FDL0NWLEVBQ0dJLEtBQU1RLElBSUwsT0FIQWYsUUFBUUMsSUFBSSxvQkFDRGMsRUFBR0MsWUFBWSxjQUFlLFlBQ3hCQyxZQUFZLGVBQ2hCQyxXQUVkWCxLQUFLWSxHQUFlakIsRUFBUyxLQUFNaUIsSUFDbkNQLE1BQU1DLEdBQU9YLEVBQVNXLEVBQUssU0FPcEN6QiwyQkFBMkJnQyxFQUFJbEIsR0FFN0JoQixTQUFTbUMsaUJBQWlCLENBQUNDLEVBQU9ILEtBQ2hDLEdBQUlHLEVBQ0ZwQixFQUFTb0IsRUFBTyxVQUNYLENBQ0wsTUFBTUMsRUFBYUosRUFBWUssS0FBS0MsR0FBS0EsRUFBRUws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QyxFQUFTOEMsWUFFdkIsT0FBTzlDLEVBQVNDLFNBT3ZCckIsMEJBQTBCZ0UsR0FDekIsS0FBTSxjQUFlL0QsUUFBVSxPQUFPLEtBR3RDLE9BRmtCSCxTQUFTa0IsU0FFVkcsS0FBS1EsSUFDcEIsTUFDTXdCLEVBREt4QixFQUFHQyxZQUFZLFVBQVcsYUFDcEJDLFlBQVksV0FDN0IsT0FBT3VCLFFBQVFDLElBQUlXLEVBQVFwQixJQUFJdUIsR0FBVWhCLEVBQU1HLElBQUlhLEtBQ2hEM0MsTUFBT0MsSUFDTixNQUFNOEIsTUFBTSx3Q0FBMEM5QixPQVE3RHpCLHlCQUNDLE1BQU0sY0FBZUMsT0FDZEgsU0FBU2tCLFNBQVNHLEtBQUtRLElBRzVCLE9BRldBLEVBQUdDLFlBQVksVUFBVyxZQUNwQkMsWUFBWSxXQUNoQkMsV0FKdUIsS0FXeEM5Qix3QkFBd0JtQyxHQUN0Qiw4QkFBZ0NBLEVBQVdILEtBTTdDaEMsNkJBQTZCbUMsR0FDM0IsT0FBSUEsRUFBV2lDLG1CQUNHakMsRUFBV2lDLGFBRXBCLDBCQVFWcEUscUJBQXFCbUMsR0FDcEIsa0NBQW9DQSxFQUFXSCxLQU1qRGhDLDhCQUE4Qm1DLEVBQVlTLEdBUXhDLE9BUGUsSUFBSXlCLE9BQU9DLEtBQUtDLE9BQU8sQ0FDcENDLFNBQVVyQyxFQUFXc0MsT0FDckJDLE1BQU92QyxFQUFXd0MsS0FDbEIxRCxJQUFLbkIsU0FBUzhFLGlCQUFpQnpDLEdBQy9CUyxJQUFLQSxFQUNMaUMsVUFBV1IsT0FBT0MsS0FBS1EsVUFBVUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29tbW9uIGRhdGFiYXNlIGhlbHBlciBmdW5jdGlvbnMuXHJcbiAqL1xyXG5jbGFzcyBEQkhlbHBlciB7XHJcbiAgLyoqXHJcbiAgICogRGF0YWJhc2UgVVJMLlxyXG4gICAqIENoYW5nZSB0aGlzIHRvIHJlc3RhdXJhbnRzLmpzb24gZmlsZSBsb2NhdGlvbiBvbiB5b3VyIHNlcnZlci5cclxuICAgKi9cclxuICBzdGF0aWMgZ2V0IERBVEFCQVNFX1VSTCgpIHtcclxuICAgIGNvbnN0IHBvcnQgPSAxMzM3IC8vIENoYW5nZSB0aGlzIHRvIHlvdXIgc2VydmVyIHBvcnRcclxuICAgIHJldHVybiBgaHR0cDovL2xvY2FsaG9zdDoke3BvcnR9L3Jlc3RhdXJhbnRzYDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBvcGVuREIoKSB7XHJcbiAgICBpZiAoISgnaW5kZXhlZERCJyBpbiB3aW5kb3cpKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdUaGlzIGJyb3dzZXIgZG9lc25cXCd0IHN1cHBvcnQgSW5kZXhlZERCJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaWRiLm9wZW4oJ213cycsIDEsICh1cGdyYWRlREIpID0+IHtcclxuICAgICAgc3dpdGNoKHVwZ3JhZGVEQi5vbGRWZXJzaW9uKSB7XHJcbiAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgbGV0IHJlc3RhdXJhbnRzU3RvcmUgPSB1cGdyYWRlREIuY3JlYXRlT2JqZWN0U3RvcmUoJ3Jlc3RhdXJhbnRzJywge2tleVBhdGg6ICdpZCd9KTtcclxuICAgICAgICAgIHJlc3RhdXJhbnRzU3RvcmUuY3JlYXRlSW5kZXgoJ2N1aXNpbmVfdHlwZScsICdjdWlzaW5lX3R5cGUnLCB7dW5pcXVlOiBmYWxzZX0pO1xyXG4gICAgICAgICAgcmVzdGF1cmFudHNTdG9yZS5jcmVhdGVJbmRleCgnbmVpZ2hib3Job29kJywgJ25laWdoYm9yaG9vZCcsIHt1bmlxdWU6IGZhbHNlfSk7XHJcbiAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgbGV0IHJldmlld3NTdG9yZSA9IHVwZ3JhZGVEQi5jcmVhdGVPYmplY3RTdG9yZSgncmV2aWV3cycsIHtrZXlQYXRoOiAnaWQnLCBhdXRvSW5jcmVtZW50OiB0cnVlfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZldGNoUmVzdGF1cmFudHMoY2FsbGJhY2spIHtcclxuXHJcbiAgICBjb25zdCBkYlByb21pc2UgPSBEQkhlbHBlci5vcGVuREIoKTtcclxuXHJcbiAgICBjb25zdCB1cmwgPSBEQkhlbHBlci5EQVRBQkFTRV9VUkw7XHJcblxyXG4gICAgZmV0Y2godXJsKVxyXG4gICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAgIC50aGVuKHJlc3RhdXJhbnRzSnNvbiA9PiB7XHJcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdGF1cmFudHNKc29uKTtcclxuICAgICAgICBEQkhlbHBlci5zYXZlUmVzdGF1cmFudHNMb2NhbGx5KHJlc3RhdXJhbnRzSnNvbilcclxuICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLndhcm4oZXJyKSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBSZXF1ZXN0IGZhaWxlZC4gRXJyb3IgcmV0dXJuZWQ6ICR7ZXJyfWApO1xyXG4gICAgICAgIGRiUHJvbWlzZVxyXG4gICAgICAgICAgLnRoZW4oKGRiKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjYWxsaW5nIGRhdGFiYXNlJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ3Jlc3RhdXJhbnRzJywgJ3JlYWRvbmx5Jyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ3Jlc3RhdXJhbnRzJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdG9yZS5nZXRBbGwoKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAudGhlbihyZXN0YXVyYW50cyA9PiBjYWxsYmFjayhudWxsLCByZXN0YXVyYW50cykpXHJcbiAgICAgICAgICAuY2F0Y2goZXJyID0+IGNhbGxiYWNrKGVyciwgbnVsbCkpO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoIGEgcmVzdGF1cmFudCBieSBpdHMgSUQuXHJcbiAgICovXHJcbiAgc3RhdGljIGZldGNoUmVzdGF1cmFudEJ5SWQoaWQsIGNhbGxiYWNrKSB7XHJcbiAgICAvLyBmZXRjaCBhbGwgcmVzdGF1cmFudHMgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXHJcbiAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHJlc3RhdXJhbnQgPSByZXN0YXVyYW50cy5maW5kKHIgPT4gci5pZCA9PSBpZCk7XHJcbiAgICAgICAgaWYgKHJlc3RhdXJhbnQpIHsgLy8gR290IHRoZSByZXN0YXVyYW50XHJcbiAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN0YXVyYW50KTtcclxuICAgICAgICB9IGVsc2UgeyAvLyBSZXN0YXVyYW50IGRvZXMgbm90IGV4aXN0IGluIHRoZSBkYXRhYmFzZVxyXG4gICAgICAgICAgY2FsbGJhY2soJ1Jlc3RhdXJhbnQgZG9lcyBub3QgZXhpc3QnLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggcmVzdGF1cmFudHMgYnkgYSBjdWlzaW5lIHR5cGUgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXHJcbiAgICovXHJcbiAgc3RhdGljIGZldGNoUmVzdGF1cmFudEJ5Q3Vpc2luZShjdWlzaW5lLCBjYWxsYmFjaykge1xyXG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzICB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZ1xyXG4gICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cygoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XHJcbiAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBGaWx0ZXIgcmVzdGF1cmFudHMgdG8gaGF2ZSBvbmx5IGdpdmVuIGN1aXNpbmUgdHlwZVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSByZXN0YXVyYW50cy5maWx0ZXIociA9PiByLmN1aXNpbmVfdHlwZSA9PSBjdWlzaW5lKTtcclxuICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaCByZXN0YXVyYW50cyBieSBhIG5laWdoYm9yaG9vZCB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgKi9cclxuICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50QnlOZWlnaGJvcmhvb2QobmVpZ2hib3Job29kLCBjYWxsYmFjaykge1xyXG4gICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXHJcbiAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEZpbHRlciByZXN0YXVyYW50cyB0byBoYXZlIG9ubHkgZ2l2ZW4gbmVpZ2hib3Job29kXHJcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IHJlc3RhdXJhbnRzLmZpbHRlcihyID0+IHIubmVpZ2hib3Job29kID09IG5laWdoYm9yaG9vZCk7XHJcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggcmVzdGF1cmFudHMgYnkgYSBjdWlzaW5lIGFuZCBhIG5laWdoYm9yaG9vZCB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgKi9cclxuICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lQW5kTmVpZ2hib3Job29kKGN1aXNpbmUsIG5laWdoYm9yaG9vZCwgY2FsbGJhY2spIHtcclxuICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xyXG4gICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cygoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XHJcbiAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsZXQgcmVzdWx0cyA9IHJlc3RhdXJhbnRzXHJcbiAgICAgICAgaWYgKGN1aXNpbmUgIT0gJ2FsbCcpIHsgLy8gZmlsdGVyIGJ5IGN1aXNpbmVcclxuICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmZpbHRlcihyID0+IHIuY3Vpc2luZV90eXBlID09IGN1aXNpbmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobmVpZ2hib3Job29kICE9ICdhbGwnKSB7IC8vIGZpbHRlciBieSBuZWlnaGJvcmhvb2RcclxuICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmZpbHRlcihyID0+IHIubmVpZ2hib3Job29kID09IG5laWdoYm9yaG9vZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoIGFsbCBuZWlnaGJvcmhvb2RzIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBmZXRjaE5laWdoYm9yaG9vZHMoY2FsbGJhY2spIHtcclxuICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xyXG4gICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cygoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XHJcbiAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBHZXQgYWxsIG5laWdoYm9yaG9vZHMgZnJvbSBhbGwgcmVzdGF1cmFudHNcclxuICAgICAgICBjb25zdCBuZWlnaGJvcmhvb2RzID0gcmVzdGF1cmFudHMubWFwKCh2LCBpKSA9PiByZXN0YXVyYW50c1tpXS5uZWlnaGJvcmhvb2QpXHJcbiAgICAgICAgLy8gUmVtb3ZlIGR1cGxpY2F0ZXMgZnJvbSBuZWlnaGJvcmhvb2RzXHJcbiAgICAgICAgY29uc3QgdW5pcXVlTmVpZ2hib3Job29kcyA9IG5laWdoYm9yaG9vZHMuZmlsdGVyKCh2LCBpKSA9PiBuZWlnaGJvcmhvb2RzLmluZGV4T2YodikgPT0gaSlcclxuICAgICAgICBjYWxsYmFjayhudWxsLCB1bmlxdWVOZWlnaGJvcmhvb2RzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaCBhbGwgY3Vpc2luZXMgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXHJcbiAgICovXHJcbiAgc3RhdGljIGZldGNoQ3Vpc2luZXMoY2FsbGJhY2spIHtcclxuICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xyXG4gICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cygoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XHJcbiAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBHZXQgYWxsIGN1aXNpbmVzIGZyb20gYWxsIHJlc3RhdXJhbnRzXHJcbiAgICAgICAgY29uc3QgY3Vpc2luZXMgPSByZXN0YXVyYW50cy5tYXAoKHYsIGkpID0+IHJlc3RhdXJhbnRzW2ldLmN1aXNpbmVfdHlwZSlcclxuICAgICAgICAvLyBSZW1vdmUgZHVwbGljYXRlcyBmcm9tIGN1aXNpbmVzXHJcbiAgICAgICAgY29uc3QgdW5pcXVlQ3Vpc2luZXMgPSBjdWlzaW5lcy5maWx0ZXIoKHYsIGkpID0+IGN1aXNpbmVzLmluZGV4T2YodikgPT0gaSlcclxuICAgICAgICBjYWxsYmFjayhudWxsLCB1bmlxdWVDdWlzaW5lcyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogIFN0b3JlIHJlc3RhdXJhbnRzIGluIGxvY2FsIElEQlxyXG4gICAqL1xyXG4gIHN0YXRpYyBzYXZlUmVzdGF1cmFudHNMb2NhbGx5KHJlc3RhdXJhbnRzKSB7XHJcbiAgICBpZiAoISgnaW5kZXhlZERCJyBpbiB3aW5kb3cpKSB7cmV0dXJuIG51bGw7fVxyXG4gICAgY29uc3QgZGJQcm9taXNlID0gREJIZWxwZXIub3BlbkRCKCk7XHJcblxyXG4gICAgcmV0dXJuIGRiUHJvbWlzZS50aGVuKGRiID0+IHtcclxuICAgICAgY29uc3QgdHggPSBkYi50cmFuc2FjdGlvbigncmVzdGF1cmFudHMnLCAncmVhZHdyaXRlJyk7XHJcbiAgICAgIGNvbnN0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ3Jlc3RhdXJhbnRzJyk7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChyZXN0YXVyYW50cy5tYXAocmVzdGF1cmFudCA9PiBzdG9yZS5wdXQocmVzdGF1cmFudCkpKVxyXG4gICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICB0aHJvdyBFcnJvcihcImNvdWxkIG5vdCBzdG9yZSByZXN0YXVyYW50cyBpbiBkYXRhYmFzZVwiKTtcclxuICAgICAgfSlcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2ggYWxsIHJldmlld3Mgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmdcclxuICAgKi9cclxuICAgc3RhdGljIGZldGNoUmV2aWV3cyhjYWxsYmFjaykge1xyXG5cclxuICAgIERCSGVscGVyLmdldFNlcnZlclJldmlld3MoKVxyXG4gICAgICAudGhlbihyZXZpZXdzRnJvbU5ldHdvcmsgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiR2V0dGluZyByZXZpZXdzIGZyb20gbmV0d29ya1wiKTtcclxuICAgICAgICBjYWxsYmFjayhudWxsLCByZXZpZXdzRnJvbU5ldHdvcmspO1xyXG4gICAgICAgIERCSGVscGVyLnNhdmVSZXZpZXdzTG9jYWxseShyZXZpZXdzRnJvbU5ldHdvcmspXHJcbiAgICAgICAgICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygnRGF0YSBmcm9tIG5ldHdvcmsgc2F2ZWQgaW4gbG9jYWwgc3RvcmUnKSlcclxuICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLndhcm4oZXJyKSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdOZXR3b3JrIHJlcXVlc3RzIGhhdmUgZmFpbGVkLCB0aGlzIGlzIGV4cGVjdGVkIGlmIG9mZmxpbmUnKTtcclxuICAgICAgICBEQkhlbHBlci5nZXRMb2NhbFJldmlld3MoKVxyXG4gICAgICAgICAgLnRoZW4ob2ZmbGluZURhdGEgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIW9mZmxpbmVEYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTm8gZGF0YVwiKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBvZmZsaW5lRGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoIHJldmlld3MgYnkgcmVzdGF1cmFudFxyXG4gICAqL1xyXG4gICBzdGF0aWMgZmV0Y2hSZXZpZXdzQnlSZXN0YXVyYW50KHJlc3RhdXJhbnRfaWQsIGNhbGxiYWNrKSB7XHJcbiAgICAvLyBGZXRjaCBhbGwgcmVzdGF1cmFudHNcclxuICAgIERCSGVscGVyLmZldGNoUmV2aWV3cygoZXJyb3IsIHJldmlld3MpID0+IHtcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEZpbHRlciByZXZpZXdzIHdpdGggYSBzcGVjaWZpYyByZXN0YXVyYW50IGlkXHJcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IHJldmlld3MuZmlsdGVyKHIgPT4gci5yZXN0YXVyYW50X2lkID09IHJlc3RhdXJhbnRfaWQpO1xyXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIEdldCByZXZpZXdzIGZyb20gc2VydmVyXHJcbiAgICAqL1xyXG4gICAgc3RhdGljIGdldFNlcnZlclJldmlld3MoKSB7XHJcbiAgICAgIHJldHVybiBmZXRjaCgnaHR0cDovL2xvY2FsaG9zdDoxMzM3L3Jldmlld3MnKVxyXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAvKipcclxuICAgKiBTYXZlIHJldmlld3MgaW4gSW5kZXhlZERCXHJcbiAgICovXHJcbiAgIHN0YXRpYyBzYXZlUmV2aWV3c0xvY2FsbHkocmV2aWV3cykge1xyXG4gICAgaWYgKCEoJ2luZGV4ZWREQicgaW4gd2luZG93KSkge3JldHVybiBudWxsO31cclxuICAgIGNvbnN0IGRiUHJvbWlzZSA9IERCSGVscGVyLm9wZW5EQigpO1xyXG5cclxuICAgIHJldHVybiBkYlByb21pc2UudGhlbihkYiA9PiB7XHJcbiAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ3Jldmlld3MnLCAncmVhZHdyaXRlJyk7XHJcbiAgICAgIGNvbnN0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ3Jldmlld3MnKTtcclxuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHJldmlld3MubWFwKHJldmlldyA9PiBzdG9yZS5wdXQocmV2aWV3KSkpXHJcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgIHRocm93IEVycm9yKCdSZXZpZXdzIHdlcmUgbm90IGFkZGVkIHRvIHRoZSBzdG9yZTogJyArIGVycik7XHJcbiAgICAgICAgfSlcclxuICAgIH0pO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgKiAgR2V0IHJldmlld3MgZnJvbSBsb2NhbCBkYXRhYmFzZVxyXG4gICAqL1xyXG4gICBzdGF0aWMgZ2V0TG9jYWxSZXZpZXdzKCkge1xyXG4gICAgaWYgKCEoJ2luZGV4ZWREQicgaW4gd2luZG93KSkge3JldHVybiBudWxsO31cclxuICAgIHJldHVybiBEQkhlbHBlci5vcGVuREIoKS50aGVuKGRiID0+IHtcclxuICAgICAgY29uc3QgdHggPSBkYi50cmFuc2FjdGlvbigncmV2aWV3cycsICdyZWFkb25seScpO1xyXG4gICAgICBjb25zdCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdyZXZpZXdzJyk7XHJcbiAgICAgIHJldHVybiBzdG9yZS5nZXRBbGwoKTtcclxuICAgIH0pO1xyXG4gICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc3RhdXJhbnQgcGFnZSBVUkwuXHJcbiAgICovXHJcbiAgc3RhdGljIHVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCkge1xyXG4gICAgcmV0dXJuIChgLi9yZXN0YXVyYW50Lmh0bWw/aWQ9JHtyZXN0YXVyYW50LmlkfWApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzdGF1cmFudCBpbWFnZSBVUkwuXHJcbiAgICovXHJcbiAgc3RhdGljIGltYWdlVXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KSB7XHJcbiAgICBpZiAocmVzdGF1cmFudC5waG90b2dyYXBoKSB7XHJcbiAgICAgIHJldHVybiAoYC9pbWcvJHtyZXN0YXVyYW50LnBob3RvZ3JhcGh9YCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gKCcvaW1nL25vLXBob3RvLWF2YWlsYWJsZScpO1xyXG4gICAgfVxyXG4gICAgICBcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc3RhdXJhbnQgcmV2aWV3cyBVUkxcclxuICAgKi9cclxuICAgc3RhdGljIHVybEZvclJldmlld3MocmVzdGF1cmFudCkge1xyXG4gICAgcmV0dXJuIChgLi9yZXZpZXdzLz9yZXN0YXVyYW50X2lkPSR7cmVzdGF1cmFudC5pZH1gKTtcclxuICAgfVxyXG5cclxuICAvKipcclxuICAgKiBNYXAgbWFya2VyIGZvciBhIHJlc3RhdXJhbnQuXHJcbiAgICovXHJcbiAgc3RhdGljIG1hcE1hcmtlckZvclJlc3RhdXJhbnQocmVzdGF1cmFudCwgbWFwKSB7XHJcbiAgICBjb25zdCBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcclxuICAgICAgcG9zaXRpb246IHJlc3RhdXJhbnQubGF0bG5nLFxyXG4gICAgICB0aXRsZTogcmVzdGF1cmFudC5uYW1lLFxyXG4gICAgICB1cmw6IERCSGVscGVyLnVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCksXHJcbiAgICAgIG1hcDogbWFwLFxyXG4gICAgICBhbmltYXRpb246IGdvb2dsZS5tYXBzLkFuaW1hdGlvbi5EUk9QfVxyXG4gICAgKTtcclxuICAgIHJldHVybiBtYXJrZXI7XHJcbiAgfVxyXG5cclxufVxyXG4iXSwiZmlsZSI6ImRiaGVscGVyLW1pbi5qcyJ9
